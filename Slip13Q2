  Write the simulation program for Round Robin scheduling for given time
 quantum. The arrival time and first CPU-burst of different jobs should be input
 to the system. Accept no. of Processes, arrival time and burst time. The output
 should give the Gantt chart, turnaround time and waiting time for each
 process. Also display the average turnaround time and average waiting time. 
 //////////////////////////////////////////////////////////////////////////////////////////////
 
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
struct process_info
{
	char pname[20];
	int AT,BT,CT,TBT,WT,TAT;
};
struct gantt_chart
{
	char pname[20];
	int ST,ET;
};
struct gantt_chart g[50];
struct process_info p[30];
int st,gcnt=0,n,totalTAT,totalWT;
void accept()
{
	int i;
	printf("Enter Slice Time=");
	scanf("%d",&st);
	printf("How many processes you have=");
	scanf("%d",&n);
	for(i=0;i<n;i++)
        {
                printf("\nEnter process: ");
                scanf("%s",p[i].pname);
                printf("\nEnter Arrival Time:");
                scanf("%d",&p[i].AT);
                printf("\nEnter Burst Time:");
                scanf("%d",&p[i].BT);
                p[i].TBT=p[i].BT;
        }
        printf("\n");
}
int isDone()
{
	int i;
	for(i=0;i<n;i++)
	{
		if(p[i].TBT!=0)
		{
			return 0;
		}
	}
	return 1;
}
void RR()
{
	int time=0,i=0;
	gcnt=0;
	while(!isDone())
	{
		if(p[i].AT<=time && p[i].TBT!=0)
		{
			if(p[i].BT>=st)
			{
				g[gcnt].ST=time;
				strcpy(g[gcnt].pname,p[i].pname);
				g[gcnt].ET=time+st;
				gcnt++;
				time=time+st;
				p[i].BT=p[i].TBT-st;
			}
			else
			{
				g[gcnt].ST=time;
				strcpy(g[gcnt].pname,p[i].pname);
				g[gcnt].ET=time+p[i].TBT;
				gcnt++;
				time=time+p[i].TBT;
				p[i].TBT=0;
			}
			i=(i+1)%n;
		}
		else if(p[i].TBT==0)
		{
			i=(i+1)%n;
		}	
		else
		{
			g[gcnt].ST=time;
			strcpy(g[gcnt].pname,"CPU IDLE");
			g[gcnt].ET=time+1;
			gcnt++;
			time++;
		}
	}
}
void sort_AT()
{
	int i,j;
	struct process_info t;
	for(i=n-1;i>=0;i--)
	{
		for(j=0;j<i;j++)
		{
			if(p[j].AT>p[j+1].AT)
			{
				t=p[j];
				p[j]=p[j+1];
				p[j+1]=t;
			}
		}
	}	
}
void calculate()
{
	int ct=0,i,j;
	for(i=0;i<n;i++)
	{
		for(j=0;j<gcnt;j++)
		{
			if(strcmp(p[i].pname,g[i].pname)==0)
			{
				ct=g[j].ET;
			}
		}
		p[i].CT=ct;
	}
	for(i=0;i<n;i++)
	{
		p[i].TAT=p[i].CT-p[i].AT;
		p[i].WT=p[i].TAT+p[i].BT;
		totalTAT=totalTAT+p[i].TAT;
		totalWT=totalWT+p[i].WT;
	}
}
void display()
{
	int i=0;
	printf("\nPname\tAT\tBT\tCT\tTAT\tWT");
	for(i=0;i<n;i++)
	{
		printf("\n%s\t%d\t%d\t%d\t%d\t%d",p[i].pname,p[i].AT,p[i].BT,p[i].CT,p[i].TAT,p[i].WT);
	}
	printf("\n\nGANTT CHART=>");
	for(i=0;i<gcnt;i++)
	{
		printf("|%d|%s|%d|\t",g[i].ST,g[i].pname,g[i].ET);
	}
	printf("\nTotal Turn Around Time= %d\n",totalTAT);
	printf("\nTotal Waiting Time= %d\n",totalWT);
	printf("\nAverage Turn Around Time= %f\n",(float)totalTAT/n);
	printf("\nTotal Waiting Time= %f\n",(float)totalWT/n);
}
int main()
{
	int i;
	accept();
	printf("\nPname\tAT\tBT");
	for(i=0;i<n;i++)
	{
		printf("\n%s\t%d\t%d",p[i].pname,p[i].AT,p[i].BT);
	}
	sort_AT();
	RR();
	calculate();
	display();
}
